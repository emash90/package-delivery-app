services:
  # MongoDB
  mongo:
    image: mongo:6
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS}
    volumes:
      - mongo_data:/data/db
    networks:
      - packaroo-network
    env_file:
      - .env

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"
      - "${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - packaroo-network
    env_file:
      - .env

  # User Service
  user-service:
    build:
      context: ./backend/services/user-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    volumes:
      - ./backend/services/user-service:/app
      - /app/node_modules
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - packaroo-network

  # Package Service
  package-service:
    build:
      context: ./backend/services/package-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${PACKAGE_SERVICE_PORT}:${PACKAGE_SERVICE_PORT}"
    volumes:
      - ./backend/services/package-service:/app
      - /app/node_modules
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - packaroo-network

  # Delivery Service
  delivery-service:
    build:
      context: ./backend/services/delivery-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${DELIVERY_SERVICE_PORT}:${DELIVERY_SERVICE_PORT}"
    volumes:
      - ./backend/services/delivery-service:/app
      - /app/node_modules
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - packaroo-network 

  # AI Agent Service
  ai-agent-service:
    build:
      context: ./backend/services/ai-agent-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${AI_SERVICE_PORT}:${AI_SERVICE_PORT}"
    volumes:
      - ./backend/services/ai-agent-service:/app
      - /app/__pycache__
    depends_on:
      mongo:
        condition: service_started
      user-service:
        condition: service_started
      package-service:
        condition: service_started
      delivery-service:
        condition: service_started
    env_file:
      - .env
    networks:
      - packaroo-network

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    depends_on:
      - user-service
      - package-service
      - delivery-service
      - ai-agent-service
    env_file:
      - .env
    networks:
      - packaroo-network 

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    env_file:
      - .env
    networks:
      - packaroo-network 

volumes:
  rabbitmq_data:
  mongo_data:

networks:
  packaroo-network:
    driver: bridge
